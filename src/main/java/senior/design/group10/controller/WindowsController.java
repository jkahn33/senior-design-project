package senior.design.group10.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import senior.design.group10.objects.response.ResponseObject;
import senior.design.group10.objects.response.ReturnAdmin;
import senior.design.group10.objects.sent.AdminInQuestion;
import senior.design.group10.objects.sent.EditAdmin;
import senior.design.group10.objects.sent.NewAdmin;
import senior.design.group10.objects.sent.SentMessage;
import senior.design.group10.service.AdminService;
import senior.design.group10.service.MessageService;

@Controller
@RequestMapping("/windows")
public class WindowsController {

    private final AdminService adminService;
    private final MessageService messageService;

    @Autowired
    public WindowsController(AdminService adminService, MessageService messageService) {
        this.adminService = adminService;
        this.messageService = messageService;
    }

    @PostMapping("/newAdmin")
    @ResponseBody
    public ResponseObject newAdmin( NewAdmin sentAdmin)
    {
    		return adminService.createNewAdmin(sentAdmin);
    }

    @PostMapping("/validateAdmin")
    @ResponseBody
    public boolean validateAdmin(@RequestBody AdminInQuestion adminInQuestion){
        return adminService.isAdminValid(adminInQuestion);
    }

    @PostMapping("/getAdmin")
    @ResponseBody
    public ReturnAdmin getAdmin(@RequestBody EditAdmin editAdmin){
        return adminService.getAdminById(editAdmin.getOldExt());
    }

    @PostMapping("/editAdmin")
    @ResponseBody
    public ResponseObject editAdmin(@RequestBody EditAdmin editAdmin){
        return adminService.editAdmin(editAdmin);
    }
    
    /*
     * Saves a new message to the database.
     * Messages contain:
     * -a string (the message)
     * -a timestamp of creation (automatically generated by the backend)
     * -an associated administrator account
     */
    @GetMapping("/newMessage")
    @ResponseBody
    public ResponseObject newMessage(SentMessage sentMessage) 
    {
    		//Sending a message
    		SentMessage sentMessages = new SentMessage("Get your ass outta here","12345","2000-01-01 20:20:20");
        return messageService.createNewMessage(sentMessages);
    }    
    
    /*
     * Returns all messages with data greater than or equal to current date.
     * Messages contain:
     * -a string (the message)
     * -a timestamp of creation (automatically generated by the backend)
     * -an associated administrator account
     */
    @GetMapping("/getCurrentMessages")
    @ResponseBody
    public ResponseObject getCurrentMessages(SentMessage sentMessage) {
    		messageService.getCurrentMessages();
        return  new ResponseObject(true,null);
    }
}
